{"version":3,"sources":["utils/getWeb3.js","components/TodoList.jsx","components/SimpleStorage.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","TodoList","_Component","_getPrototypeOf2","_this","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","accounts","todos","todoContract","newTodo","err","componentDidMount","_callee3","_this$props","TodolistContract_","TodolistContractInstance","_context3","props","truffleContract","TodolistContract","setProvider","currentProvider","deployed","sent","setState","added","on","_ref2","e","newLen","numTodos","toConsumableArray","text","returnValues","id","toNumber","_x","removed","_ref3","_callee2","_context2","filter","todo","_x2","getTodos","_callee4","todosCount","i","_context4","objectSpread","addTodo","_callee5","_this$state","_context5","from","removeTodo","_ref6","_callee6","_this$state2","_context6","utils","numberToHex","_x3","inherits","createClass","key","value","_this2","_this$state3","react_default","createElement","message","map","onClick","onChange","target","Component","SimpleStorage","storageValue","contract","val","setVal","set","Contract","SimpleStorageContract","instance","get","response","DataWillChange","newData","_this3","event","type","App","eth","getAccounts","href","className","SimpleStorage_SimpleStorage","components_TodoList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d6f9b25.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport TodolistContract from \"../contracts/TodoList.json\";\nimport truffleContract from \"truffle-contract\";\n\nexport class TodoList extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    todos: [],\n    todoContract: null,\n    newTodo: null,\n    err: null\n  };\n\n  componentDidMount = async () => {\n    // Get network provider and web3 instance.\n    const { web3, accounts } = this.props;\n\n    const TodolistContract_ = truffleContract(TodolistContract);\n    TodolistContract_.setProvider(web3.currentProvider);\n    try {\n      const TodolistContractInstance = await TodolistContract_.deployed();\n\n      this.setState({ web3, accounts, TodolistContractInstance });\n\n      TodolistContractInstance.added().on(\"data\", async e => {\n        const newLen = await TodolistContractInstance.numTodos();\n        this.setState({\n          todos: [\n            ...this.state.todos,\n            { text: e.returnValues.text, id: newLen.toNumber() - 1 }\n          ]\n        });\n      });\n\n      TodolistContractInstance.removed().on(\"data\", async e => {\n        this.setState({\n          todos: this.state.todos.filter(\n            todo => todo.id !== e.returnValues.id * 1\n          )\n        });\n      });\n\n      await this.getTodos();\n    } catch (err) {\n      this.setState({ err });\n    }\n  };\n\n  getTodos = async () => {\n    const { TodolistContractInstance } = this.state;\n    const todosCount = await TodolistContractInstance.numTodos();\n\n    for (let i = 0; i < todosCount; i++) {\n      const todo = await TodolistContractInstance.todos(i);\n      console.log(todo, i);\n      if (!todo.removed)\n        this.setState({ todos: [...this.state.todos, { ...todo, id: i }] });\n    }\n  };\n\n  addTodo = async () => {\n    const { TodolistContractInstance, accounts } = this.state;\n    await TodolistContractInstance.addTodo(this.state.newTodo, {\n      from: accounts[0]\n    });\n  };\n\n  removeTodo = async id => {\n    const { TodolistContractInstance, accounts, web3 } = this.state;\n    await TodolistContractInstance.removeTodo(web3.utils.numberToHex(id), {\n      from: accounts[0]\n    });\n  };\n\n  render() {\n    const { err, todos } = this.state;\n    return (\n      <div>\n        <h3>TODOS!!!</h3>\n        {err ? (\n          err.message\n        ) : (\n          <div>\n            {todos.map((todo, i) => (\n              <div key={i}>\n                {todo.text} | {todo.id}\n                <button onClick={() => this.removeTodo(todo.id)}>x</button>\n              </div>\n            ))}\n            <input onChange={e => this.setState({ newTodo: e.target.value })} />\n            <button onClick={this.addTodo}>ADD</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"../contracts/SimpleStorage.json\";\nimport truffleContract from \"truffle-contract\";\n\nexport default class SimpleStorage extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    val: 0,\n    err: null\n  };\n  async componentDidMount() {\n    const { web3, accounts } = this.props;\n\n    // Get the contract instance.\n    const Contract = truffleContract(SimpleStorageContract);\n    Contract.setProvider(web3.currentProvider);\n    try {\n      const instance = await Contract.deployed();\n      // Get the value from the contract to prove it worked.\n      const response = await instance.get();\n\n      instance.DataWillChange().on(\"data\", e => {\n        this.setState({ storageValue: e.returnValues.newData });\n      });\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3,\n        accounts,\n        contract: instance,\n        storageValue: response.toNumber()\n      });\n    } catch (err) {\n      this.setState({ err });\n    }\n  }\n  setVal = async () => {\n    const { accounts, contract, val } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.set(val, { from: accounts[0] });\n  };\n  render() {\n    const { err } = this.state;\n    return (\n      <div>\n        <h3>SIMPLE INT STORAGE</h3>\n        {err ? (\n          err.message\n        ) : (\n          <div>\n            <div>The stored value is: {this.state.storageValue}</div>\n            <input\n              onChange={event => {\n                this.setState({ val: event.target.value });\n              }}\n              type=\"text\"\n            />{\" \"}\n            <button onClick={this.setVal}>SAVE</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nimport TodoList from \"./components/TodoList\";\nimport SimpleStorage from \"./components/SimpleStorage\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    err: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3,\n        accounts\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      this.setState({err: error});\n      console.log(error);\n    }\n  };\n\n  render() {\n    const { web3, accounts, err } = this.state;\n    if (err) {\n      return <div>OH NO! There was an Error while trying communicate to blockchain <br /> ERR MESSAGE: \"{err.message}\" <br /> Please ensure you have metamask plugin installed and enabled <br /> If you don't have one you cat install it <a href=\"https://metamask.io/\">here</a></div>\n    }\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contracts...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <h2>Smart Contract Examples</h2>\n\n        <SimpleStorage web3={web3} accounts={accounts} />\n        <TodoList web3={web3} accounts={accounts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}