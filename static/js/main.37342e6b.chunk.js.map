{"version":3,"sources":["utils/getWeb3.js","components/TodoList.jsx","components/SimpleStorage.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","TodoList","_Component","_getPrototypeOf2","_this","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","accounts","todos","todoContract","newTodo","componentDidMount","_callee3","_this$props","TodolistContract_","TodolistContractInstance","_context3","props","truffleContract","TodolistContract","setProvider","currentProvider","deployed","sent","setState","added","on","_ref2","e","newLen","numTodos","toConsumableArray","text","returnValues","id","toNumber","_x","removed","_ref3","_callee2","_context2","filter","todo","_x2","getTodos","_callee4","todosCount","i","_context4","objectSpread","addTodo","_callee5","_this$state","_context5","from","removeTodo","_ref6","_callee6","_this$state2","_context6","utils","numberToHex","_x3","inherits","createClass","key","value","_this2","react_default","createElement","map","onClick","onChange","target","Component","SimpleStorage","storageValue","contract","val","setVal","set","Contract","SimpleStorageContract","instance","get","response","DataWillChange","newData","_this3","event","type","App","eth","getAccounts","alert","className","SimpleStorage_SimpleStorage","components_TodoList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37342e6b.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport TodolistContract from \"../contracts/TodoList.json\";\nimport truffleContract from \"truffle-contract\";\n\nexport class TodoList extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    todos: [],\n    todoContract: null,\n    newTodo: null\n  };\n\n  componentDidMount = async () => {\n    // Get network provider and web3 instance.\n    const { web3, accounts } = this.props;\n\n    const TodolistContract_ = truffleContract(TodolistContract);\n    TodolistContract_.setProvider(web3.currentProvider);\n    const TodolistContractInstance = await TodolistContract_.deployed();\n\n    this.setState({ web3, accounts, TodolistContractInstance });\n\n    TodolistContractInstance.added().on(\"data\", async e => {\n      const newLen = await TodolistContractInstance.numTodos();\n      this.setState({\n        todos: [\n          ...this.state.todos,\n          { text: e.returnValues.text, id: newLen.toNumber() - 1 }\n        ]\n      });\n    });\n\n    TodolistContractInstance.removed().on(\"data\", async e => {\n      this.setState({\n        todos: this.state.todos.filter(\n          todo => todo.id !== e.returnValues.id * 1\n        )\n      });\n    });\n\n    await this.getTodos();\n  };\n\n  getTodos = async () => {\n    const { TodolistContractInstance } = this.state;\n    const todosCount = await TodolistContractInstance.numTodos();\n\n    for (let i = 0; i < todosCount; i++) {\n      const todo = await TodolistContractInstance.todos(i);\n      console.log(todo, i);\n      if (!todo.removed)\n        this.setState({ todos: [...this.state.todos, { ...todo, id: i }] });\n    }\n  };\n\n  addTodo = async () => {\n    const { TodolistContractInstance, accounts } = this.state;\n    await TodolistContractInstance.addTodo(this.state.newTodo, {\n      from: accounts[0]\n    });\n  };\n\n  removeTodo = async id => {\n    const { TodolistContractInstance, accounts, web3 } = this.state;\n    console.log(\"RM TODO\", id);\n    await TodolistContractInstance.removeTodo(web3.utils.numberToHex(id), {\n      from: accounts[0]\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>TODOS!!!</h3>\n        {this.state.todos.map((todo, i) => (\n          <div key={i}>\n            {todo.text} | {todo.id}\n            <button onClick={() => this.removeTodo(todo.id)}>x</button>\n          </div>\n        ))}\n        <input onChange={e => this.setState({ newTodo: e.target.value })} />\n        <button onClick={this.addTodo}>ADD</button>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"../contracts/SimpleStorage.json\";\nimport truffleContract from \"truffle-contract\";\n\nexport default class SimpleStorage extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    val: 0\n  };\n  async componentDidMount() {\n    const { web3, accounts } = this.props;\n\n    // Get the contract instance.\n    const Contract = truffleContract(SimpleStorageContract);\n    Contract.setProvider(web3.currentProvider);\n    const instance = await Contract.deployed();\n    // Get the value from the contract to prove it worked.\n    const response = await instance.get();\n\n    instance.DataWillChange().on(\"data\", e => {\n      this.setState({ storageValue: e.returnValues.newData });\n    });\n\n    // Set web3, accounts, and contract to the state, and then proceed with an\n    // example of interacting with the contract's methods.\n    this.setState({\n      web3,\n      accounts,\n      contract: instance,\n      storageValue: response.toNumber()\n    });\n  }\n  setVal = async () => {\n    const { accounts, contract, val } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.set(val, { from: accounts[0] });\n  };\n  render() {\n    return (\n      <div>\n        <h3>SIMPLE INT STORAGE</h3>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <input\n          onChange={event => {\n            this.setState({ val: event.target.value });\n          }}\n          type=\"text\"\n        />{\" \"}\n        <button onClick={this.setVal}>SAVE</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nimport TodoList from \"./components/TodoList\";\nimport SimpleStorage from \"./components/SimpleStorage\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3,\n        accounts\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n\n  render() {\n    const { web3, accounts } = this.state;\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <h2>Smart Contract Examples</h2>\n\n        <SimpleStorage web3={web3} accounts={accounts} />\n        <TodoList web3={web3} accounts={accounts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}